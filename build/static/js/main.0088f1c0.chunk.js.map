{"version":3,"sources":["components/Timer.js","components/ActivityTracker.js","enums/StepActionEnum.js","enums/StepTitleEnum.js","components/Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","useState","countdown","setCountdown","timerId","setTimerId","timerStopped","setTimerStopped","remainingCountDown","setRemainingCountDown","seconds","String","padStart","minutes","Math","floor","handleNextAction","useCallback","clearInterval","proceedToTheNextStep","useEffect","className","onClick","setInterval","ActivityTracker","steps","map","step","index","action","title","timePeriod","StepActionEnum","StepTitleEnum","Dashboard","setSteps","find","undefined","getActiveStepTimePeriod","activeStepIndex","shouldAddOneMoreStep","updatedSteps","stepIndex","length","addedStep","lastStep","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kUA6FeA,MAzFf,SAAeC,GACb,MAAkCC,mBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,qBAA9B,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAwCJ,oBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAAoDN,mBAAS,GAA7D,mBAAOO,EAAP,KAA2BC,EAA3B,KAwBMC,EAAUC,OAAOH,EAAqB,IAAII,SAAS,EAAG,GACtDC,EAAUF,OAAOG,KAAKC,MAAMP,EAAqB,KAAKI,SAAS,EAAG,GAElEI,EAAmBC,uBAAY,WACnCC,cAAcd,GACdJ,EAAMmB,yBACL,CAACnB,EAAOI,IAeX,OAbAgB,qBAAU,WACRb,GAAgB,GAChBJ,EAA+B,GAAlBH,EAAME,WACnBO,EAAwC,GAAlBT,EAAME,aAE3B,CAACF,EAAME,YAEVkB,qBAAU,WACJZ,EAAqB,GACvBQ,MAED,CAACR,EAAoBQ,IAGtB,sBAAKK,UAAU,QAAf,UACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,qBAAKA,UAAU,QAAf,SAAwBR,IACxB,qBAAKQ,UAAU,QAAf,wBAEF,sBAAKA,UAAU,qBAAf,UACE,qBAAKA,UAAU,QAAf,SAAwBX,IACxB,qBAAKW,UAAU,QAAf,2BAGJ,sBAAKA,UAAU,qBAAf,UACE,yBACEA,UAAU,yBACVC,SACmB,IAAjBhB,EAhDqB,WAC7BY,cAAcd,GACdG,GAAgB,IAZY,WAC5BA,GAAgB,GAEhBF,EACEkB,aAAY,WACVd,GAAsB,SAACD,GAAD,OAAwBA,EAAqB,OAClE,OAiDD,UAQE,mBAAGa,UAAYf,EAA8B,YAAf,eAC5BA,EAAyB,OAAV,WAEnB,yBACEe,UAAU,yBACVC,QArDuB,WAC7BJ,cAAcd,GACdG,GAAgB,GAChBE,EAAsBP,IAgDlB,UAIE,mBAAGmB,UAAU,cAJf,UAOA,yBAAQA,UAAU,yBAAyBC,QAASN,EAApD,UACE,mBAAGK,UAAU,uBADf,iBCvDOG,G,MA1BS,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACzB,OACE,qBAAKJ,UAAU,mBAAf,SACE,qBAAKA,UAAU,WAAf,SACGI,GACCA,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACR,sBAAKP,UAAWM,EAAKE,OAAS,QAA9B,UACE,mBACE,cAAY,OACZR,UACiB,aAAfM,EAAKG,MACD,sBACA,gBAGR,sBAAKT,UAAU,UAAf,UACE,qBAAKA,UAAU,QAAf,SAAwBM,EAAKG,QAC7B,sBAAKT,UAAU,cAAf,UAA8BM,EAAKI,WAAnC,mBAXwCH,YCT3CI,G,MACE,aADFA,EAED,SAFCA,EAGC,WCHDC,EACC,WADDA,EAEF,QCsFIC,MAjFf,WAEI,MAA0BjC,mBAAS,CAC7B,CACE6B,MAAOG,EACPF,WAAY,GACZF,OAAQG,GAEV,CACEF,MAAOG,EACPF,WAAY,EACZF,OAAQG,GAEV,CACEF,MAAOG,EACPF,WAAY,GACZF,OAAQG,KAdhB,mBAAOP,EAAP,KAAcU,EAAd,KAuEA,OACI,sBAAKd,UAAU,YAAf,UACI,cAAC,EAAD,CAAiBI,MAAOA,IACxB,cAAC,EAAD,CAAOvB,UAxDiB,WAC5B,IAAIyB,EAAOF,EAAMW,MAAK,SAAAT,GAAI,OAAIA,EAAKE,SAAWG,KAC9C,QAAaK,IAATV,EAGJ,OAAOA,EAAKI,WAmDUO,GAA2BnB,qBAjCxB,WACzB,IAAKoB,OAA0CF,EAAzBG,GAAoC,EACtDC,EAAehB,EAAMC,KAAI,SAACC,EAAMe,GAUhC,OATIf,EAAKE,SAAWG,IAChBO,EAAkBG,EAClBf,EAAKE,OAASG,QAEKK,GAAnBE,GAAiCA,EAAkB,IAAOG,GAAajB,EAAMkB,OAAS,EAAIJ,IAC1Fd,EAAMiB,GAAWb,OAASG,EAC1BQ,GAAuB,GAGpBb,KAGX,GAAIa,EAAsB,CACtB,IACII,EADAC,EAAWpB,EAAMA,EAAMkB,OAAS,GAGhCC,OADaP,IAAbQ,GAA0BA,EAASf,QAAUG,EACjC,CAACH,MAAOG,EAAwBF,WAAY,GAAIF,OAAQG,GAExD,CAACF,MAAOG,EAAqBF,WAAY,EAAGF,OAAQG,GAEpEG,GAAS,SAAAV,GAAK,4BAAQgB,GAAR,CAAsBG,YAGpCT,GAAS,SAAAV,GAAK,OAAIgB,YChEfK,MARf,WACE,OACE,qBAAKzB,UAAU,MAAf,SACE,cAAC,EAAD,OCKS0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0088f1c0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useCallback } from \"react/cjs/react.development\";\r\nimport \"./Timer.css\";\r\n\r\nfunction Timer(props) {\r\n  const [countdown, setCountdown] = useState(0);\r\n  const [timerId, setTimerId] = useState();\r\n  const [timerStopped, setTimerStopped] = useState(true);\r\n  const [remainingCountDown, setRemainingCountDown] = useState(0);\r\n\r\n  //#region functions\r\n  const handlePlayButtonClick = () => {\r\n    setTimerStopped(false);\r\n\r\n    setTimerId(\r\n      setInterval(() => {\r\n        setRemainingCountDown((remainingCountDown) => remainingCountDown - 1);\r\n      }, 1000)\r\n    );\r\n  }\r\n\r\n  const handlePauseButtonClick = () => {\r\n    clearInterval(timerId);\r\n    setTimerStopped(true);\r\n  };\r\n\r\n  const handleResetButtonClick = () => {\r\n    clearInterval(timerId);\r\n    setTimerStopped(true);\r\n    setRemainingCountDown(countdown);\r\n  };\r\n\r\n  const seconds = String(remainingCountDown % 60).padStart(2, 0);\r\n  const minutes = String(Math.floor(remainingCountDown / 60)).padStart(2, 0);\r\n\r\n  const handleNextAction = useCallback(() => {\r\n    clearInterval(timerId);\r\n    props.proceedToTheNextStep();\r\n  }, [props, timerId]);\r\n  \r\n  useEffect(() => {\r\n    setTimerStopped(true);\r\n    setCountdown(props.countdown * 60);\r\n    setRemainingCountDown(props.countdown * 60);\r\n\r\n  }, [props.countdown]);\r\n\r\n  useEffect(() => {\r\n    if (remainingCountDown < 0) {\r\n      handleNextAction();\r\n    }\r\n  }, [remainingCountDown, handleNextAction]);\r\n\r\n  return (\r\n    <div className=\"timer\">\r\n      <div className=\"countdown\">\r\n        <div className=\"ui small statistic\">\r\n          <div className=\"value\">{minutes}</div>\r\n          <div className=\"label\">minutes</div>\r\n        </div>\r\n        <div className=\"ui small statistic\">\r\n          <div className=\"value\">{seconds}</div>\r\n          <div className=\"label\">seconds</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"timer-buttons-wrap\">\r\n        <button\r\n          className=\"ui labeled icon button\"\r\n          onClick={\r\n            timerStopped === false\r\n              ? handlePauseButtonClick\r\n              : handlePlayButtonClick\r\n          }\r\n        >\r\n          <i className={!timerStopped ? \"pause icon\" : \"play icon\"}></i>\r\n          {!timerStopped ? \"Pause\" : \"Play\"}\r\n        </button>\r\n        <button\r\n          className=\"ui labeled icon button\"\r\n          onClick={handleResetButtonClick}\r\n        >\r\n          <i className=\"stop icon\"></i>\r\n          Stop\r\n        </button>\r\n        <button className=\"ui labeled icon button\" onClick={handleNextAction}>\r\n          <i className=\"chevron right icon\"></i>\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n","import React, { Component } from \"react\";\r\nimport \"./ActivityTracker.css\";\r\n\r\nconst ActivityTracker = ({ steps }) => {\r\n  return (\r\n    <div className=\"activity-tracker\">\r\n      <div className=\"ui steps\">\r\n        {steps &&\r\n          steps.map((step, index) => (\r\n            <div className={step.action + \" step\"} key={index}>\r\n              <i\r\n                aria-hidden=\"true\"\r\n                className={\r\n                  step.title === \"Focusing\"\r\n                    ? \"circle outline icon\"\r\n                    : \"coffee icon\"\r\n                }\r\n              ></i>\r\n              <div className=\"content\">\r\n                <div className=\"title\">{step.title}</div>\r\n                <div className=\"description\">{step.timePeriod} minutes</div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActivityTracker;","export const StepActionEnum = {\r\n    Completed: 'completed',\r\n    Active: 'active',\r\n    Disabled: 'disabled'\r\n}\r\n","export const StepTitleEnum = {\r\n    Focusing: \"Focusing\",\r\n    Break: \"Break\"\r\n}","import React, { useState } from 'react'\r\nimport Timer from './Timer'\r\nimport ActivityTracker from './ActivityTracker'\r\nimport './Dashboard.css'\r\nimport { StepActionEnum } from '../enums/StepActionEnum'\r\nimport { StepTitleEnum } from '../enums/StepTitleEnum'\r\n\r\nfunction Dashboard () {\r\n    \r\n    const [steps, setSteps] = useState([\r\n          {\r\n            title: StepTitleEnum.Focusing,\r\n            timePeriod: 25,\r\n            action: StepActionEnum.Active\r\n          },\r\n          {\r\n            title: StepTitleEnum.Break,\r\n            timePeriod: 5,\r\n            action: StepActionEnum.Disabled\r\n          },\r\n          {\r\n            title: StepTitleEnum.Focusing,\r\n            timePeriod: 25,\r\n            action: StepActionEnum.Disabled\r\n          }\r\n        ]);\r\n\r\n    const getActiveStepTimePeriod = () => {\r\n        var step = steps.find(step => step.action === StepActionEnum.Active);\r\n        if (step === undefined) {\r\n            return undefined;\r\n        }\r\n        return step.timePeriod;\r\n    };\r\n\r\n    const addActiveStep = () => {\r\n        if (steps === undefined){\r\n            setSteps([]);\r\n        }\r\n\r\n        var lastStep = steps[steps.length - 1];\r\n        var addedStep;\r\n        if (lastStep === undefined || lastStep.title === StepTitleEnum.Break) {\r\n            addedStep = {title: StepTitleEnum.Focusing, timePeriod: 25, action: StepActionEnum.Active}\r\n        } else {\r\n            addedStep = {title: StepTitleEnum.Break, timePeriod: 5, action: StepActionEnum.Active}\r\n        }\r\n        setSteps([...steps, addedStep])\r\n    }\r\n\r\n    const proceedToTheNextStep = () => {\r\n        var [activeStepIndex, shouldAddOneMoreStep] = [undefined, true];\r\n        var updatedSteps = steps.map((step, stepIndex) => {\r\n            if (step.action === StepActionEnum.Active) {\r\n                activeStepIndex = stepIndex;\r\n                step.action = StepActionEnum.Completed;\r\n            }\r\n            if (activeStepIndex != undefined && (activeStepIndex + 1) === stepIndex && steps.length - 1 > activeStepIndex) {\r\n                steps[stepIndex].action = StepActionEnum.Active;\r\n                shouldAddOneMoreStep = false;\r\n            }\r\n\r\n            return step;\r\n        });\r\n        \r\n        if (shouldAddOneMoreStep) {\r\n            var lastStep = steps[steps.length - 1];\r\n            var addedStep;\r\n            if (lastStep === undefined || lastStep.title === StepTitleEnum.Break) {\r\n                addedStep = {title: StepTitleEnum.Focusing, timePeriod: 25, action: StepActionEnum.Active}\r\n            } else {\r\n                addedStep = {title: StepTitleEnum.Break, timePeriod: 5, action: StepActionEnum.Active}\r\n            }\r\n            setSteps(steps => [...updatedSteps, addedStep]);\r\n        }\r\n        else {\r\n            setSteps(steps => updatedSteps);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"dashboard\">\r\n            <ActivityTracker steps={steps}></ActivityTracker>\r\n            <Timer countdown={getActiveStepTimePeriod()} proceedToTheNextStep={proceedToTheNextStep}></Timer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","import './App.css';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport Dashboard from './components/Dashboard';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Dashboard></Dashboard>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App></App>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}